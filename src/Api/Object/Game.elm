-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Object.Game exposing (..)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import ScalarCodecs


networkDescription : SelectionSet String Api.Object.Game
networkDescription =
    Object.selectionForField "String" "networkDescription" [] Decode.string


gameName : SelectionSet String Api.Object.Game
gameName =
    Object.selectionForField "String" "gameName" [] Decode.string


{-| The document's ID.
-}
id_ : SelectionSet ScalarCodecs.Id Api.Object.Game
id_ =
    Object.selectionForField "ScalarCodecs.Id" "_id" [] (ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecId |> .decoder)


walletAmount : SelectionSet (Maybe Int) Api.Object.Game
walletAmount =
    Object.selectionForField "(Maybe Int)" "walletAmount" [] (Decode.int |> Decode.nullable)


end : SelectionSet (Maybe ScalarCodecs.Date) Api.Object.Game
end =
    Object.selectionForField "(Maybe ScalarCodecs.Date)" "end" [] (ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDate |> .decoder |> Decode.nullable)


networkName : SelectionSet String Api.Object.Game
networkName =
    Object.selectionForField "String" "networkName" [] Decode.string


type alias ShowsOptionalArguments =
    { size_ : OptionalArgument Int
    , cursor_ : OptionalArgument String
    }


{-|

  - size\_ - The number of items to return per page.
  - cursor\_ - The pagination cursor.

-}
shows : (ShowsOptionalArguments -> ShowsOptionalArguments) -> SelectionSet decodesTo Api.Object.ShowPage -> SelectionSet decodesTo Api.Object.Game
shows fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { size_ = Absent, cursor_ = Absent }

        optionalArgs =
            [ Argument.optional "_size" filledInOptionals.size_ Encode.int, Argument.optional "_cursor" filledInOptionals.cursor_ Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "shows" optionalArgs object_ identity


start : SelectionSet (Maybe ScalarCodecs.Date) Api.Object.Game
start =
    Object.selectionForField "(Maybe ScalarCodecs.Date)" "start" [] (ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDate |> .decoder |> Decode.nullable)


user : SelectionSet decodesTo Api.Object.User -> SelectionSet (Maybe decodesTo) Api.Object.Game
user object_ =
    Object.selectionForCompositeField "user" [] object_ (identity >> Decode.nullable)


{-| The document's timestamp.
-}
ts_ : SelectionSet ScalarCodecs.Long Api.Object.Game
ts_ =
    Object.selectionForField "ScalarCodecs.Long" "_ts" [] (ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecLong |> .decoder)
