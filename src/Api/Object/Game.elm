-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Object.Game exposing (..)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


network : SelectionSet (Maybe String) Api.Object.Game
network =
    Object.selectionForField "(Maybe String)" "network" [] (Decode.string |> Decode.nullable)


{-| The document's ID.
-}
id_ : SelectionSet Api.ScalarCodecs.Id Api.Object.Game
id_ =
    Object.selectionForField "ScalarCodecs.Id" "_id" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecId |> .decoder)


amount : SelectionSet (Maybe Int) Api.Object.Game
amount =
    Object.selectionForField "(Maybe Int)" "amount" [] (Decode.int |> Decode.nullable)


end : SelectionSet (Maybe Api.ScalarCodecs.Date) Api.Object.Game
end =
    Object.selectionForField "(Maybe ScalarCodecs.Date)" "end" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDate |> .decoder |> Decode.nullable)


type alias ShowsOptionalArguments =
    { size_ : OptionalArgument Int
    , cursor_ : OptionalArgument String
    }


{-|

  - size\_ - The number of items to return per page.
  - cursor\_ - The pagination cursor.

-}
shows : (ShowsOptionalArguments -> ShowsOptionalArguments) -> SelectionSet decodesTo Api.Object.ShowPage -> SelectionSet decodesTo Api.Object.Game
shows fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { size_ = Absent, cursor_ = Absent }

        optionalArgs =
            [ Argument.optional "_size" filledInOptionals.size_ Encode.int, Argument.optional "_cursor" filledInOptionals.cursor_ Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "shows" optionalArgs object_ identity


start : SelectionSet (Maybe Api.ScalarCodecs.Date) Api.Object.Game
start =
    Object.selectionForField "(Maybe ScalarCodecs.Date)" "start" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDate |> .decoder |> Decode.nullable)


user : SelectionSet decodesTo Api.Object.User -> SelectionSet (Maybe decodesTo) Api.Object.Game
user object_ =
    Object.selectionForCompositeField "user" [] object_ (identity >> Decode.nullable)


{-| The document's timestamp.
-}
ts_ : SelectionSet Api.ScalarCodecs.Long Api.Object.Game
ts_ =
    Object.selectionForField "ScalarCodecs.Long" "_ts" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecLong |> .decoder)
