-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Query exposing (..)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias AvailableNetworkOptionalArguments =
    { size_ : OptionalArgument Int
    , cursor_ : OptionalArgument String
    }


{-|

  - size\_ - The number of items to return per page.
  - cursor\_ - The pagination cursor.

-}
availableNetwork : (AvailableNetworkOptionalArguments -> AvailableNetworkOptionalArguments) -> SelectionSet decodesTo Api.Object.AvailableNetworkPage -> SelectionSet decodesTo RootQuery
availableNetwork fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { size_ = Absent, cursor_ = Absent }

        optionalArgs =
            [ Argument.optional "_size" filledInOptionals.size_ Encode.int, Argument.optional "_cursor" filledInOptionals.cursor_ Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "availableNetwork" optionalArgs object_ identity


type alias AllGamesOptionalArguments =
    { size_ : OptionalArgument Int
    , cursor_ : OptionalArgument String
    }


{-|

  - size\_ - The number of items to return per page.
  - cursor\_ - The pagination cursor.

-}
allGames : (AllGamesOptionalArguments -> AllGamesOptionalArguments) -> SelectionSet decodesTo Api.Object.GamePage -> SelectionSet decodesTo RootQuery
allGames fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { size_ = Absent, cursor_ = Absent }

        optionalArgs =
            [ Argument.optional "_size" filledInOptionals.size_ Encode.int, Argument.optional "_cursor" filledInOptionals.cursor_ Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "allGames" optionalArgs object_ identity


type alias FindAvailableNetworkByIDRequiredArguments =
    { id : Api.ScalarCodecs.Id }


{-| Find a document from the collection of 'AvailableNetwork' by its id.

  - id - The 'AvailableNetwork' document's ID

-}
findAvailableNetworkByID : FindAvailableNetworkByIDRequiredArguments -> SelectionSet decodesTo Api.Object.AvailableNetwork -> SelectionSet (Maybe decodesTo) RootQuery
findAvailableNetworkByID requiredArgs object_ =
    Object.selectionForCompositeField "findAvailableNetworkByID" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias FindGameByIDRequiredArguments =
    { id : Api.ScalarCodecs.Id }


{-| Find a document from the collection of 'Game' by its id.

  - id - The 'Game' document's ID

-}
findGameByID : FindGameByIDRequiredArguments -> SelectionSet decodesTo Api.Object.Game -> SelectionSet (Maybe decodesTo) RootQuery
findGameByID requiredArgs object_ =
    Object.selectionForCompositeField "findGameByID" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias FindShowByIDRequiredArguments =
    { id : Api.ScalarCodecs.Id }


{-| Find a document from the collection of 'Show' by its id.

  - id - The 'Show' document's ID

-}
findShowByID : FindShowByIDRequiredArguments -> SelectionSet decodesTo Api.Object.Show -> SelectionSet (Maybe decodesTo) RootQuery
findShowByID requiredArgs object_ =
    Object.selectionForCompositeField "findShowByID" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias FindAvalableShowByIDRequiredArguments =
    { id : Api.ScalarCodecs.Id }


{-| Find a document from the collection of 'AvalableShow' by its id.

  - id - The 'AvalableShow' document's ID

-}
findAvalableShowByID : FindAvalableShowByIDRequiredArguments -> SelectionSet decodesTo Api.Object.AvalableShow -> SelectionSet (Maybe decodesTo) RootQuery
findAvalableShowByID requiredArgs object_ =
    Object.selectionForCompositeField "findAvalableShowByID" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias AvailableShowsOptionalArguments =
    { size_ : OptionalArgument Int
    , cursor_ : OptionalArgument String
    }


{-|

  - size\_ - The number of items to return per page.
  - cursor\_ - The pagination cursor.

-}
availableShows : (AvailableShowsOptionalArguments -> AvailableShowsOptionalArguments) -> SelectionSet decodesTo Api.Object.AvalableShowPage -> SelectionSet decodesTo RootQuery
availableShows fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { size_ = Absent, cursor_ = Absent }

        optionalArgs =
            [ Argument.optional "_size" filledInOptionals.size_ Encode.int, Argument.optional "_cursor" filledInOptionals.cursor_ Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "availableShows" optionalArgs object_ identity


type alias FindUserByIDRequiredArguments =
    { id : Api.ScalarCodecs.Id }


{-| Find a document from the collection of 'User' by its id.

  - id - The 'User' document's ID

-}
findUserByID : FindUserByIDRequiredArguments -> SelectionSet decodesTo Api.Object.User -> SelectionSet (Maybe decodesTo) RootQuery
findUserByID requiredArgs object_ =
    Object.selectionForCompositeField "findUserByID" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias GameByUserNameOptionalArguments =
    { size_ : OptionalArgument Int
    , cursor_ : OptionalArgument String
    }


type alias GameByUserNameRequiredArguments =
    { userName : Api.ScalarCodecs.Id }


{-|

  - size\_ - The number of items to return per page.
  - cursor\_ - The pagination cursor.

-}
gameByUserName : (GameByUserNameOptionalArguments -> GameByUserNameOptionalArguments) -> GameByUserNameRequiredArguments -> SelectionSet decodesTo Api.Object.GamePage -> SelectionSet decodesTo RootQuery
gameByUserName fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { size_ = Absent, cursor_ = Absent }

        optionalArgs =
            [ Argument.optional "_size" filledInOptionals.size_ Encode.int, Argument.optional "_cursor" filledInOptionals.cursor_ Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "gameByUserName" (optionalArgs ++ [ Argument.required "userName" requiredArgs.userName (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ]) object_ identity


type alias FindCurrentNetworksByIDRequiredArguments =
    { id : Api.ScalarCodecs.Id }


{-| Find a document from the collection of 'CurrentNetworks' by its id.

  - id - The 'CurrentNetworks' document's ID

-}
findCurrentNetworksByID : FindCurrentNetworksByIDRequiredArguments -> SelectionSet decodesTo Api.Object.CurrentNetworks -> SelectionSet (Maybe decodesTo) RootQuery
findCurrentNetworksByID requiredArgs object_ =
    Object.selectionForCompositeField "findCurrentNetworksByID" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)
