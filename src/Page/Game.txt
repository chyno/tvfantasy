-- module Page.Game exposing (Model, Msg(.. ), init, subscriptions, update, view)
-- import Html exposing (..)
-- import Html.Attributes exposing (..)
-- import Html.Events exposing (onClick)
-- import GameApi exposing(queryUserInfo)
-- import  Shared exposing  ( NetworkInfo, UserInfo)
-- import RemoteData exposing (RemoteData)
-- import Graphql.OptionalArgument exposing (OptionalArgument(..))
-- import Graphql.Http
-- import Bootstrap.Form as Form
-- import Bootstrap.Form.Select as Select
-- import Bootstrap.Button as Button
-- import Bootstrap.ListGroup as ListGroup
-- import Routes exposing (showsPath)
-- import Browser.Navigation as Nav
-- -- Model
-- type Model =    Loading String
--                 | LoadingProblem String
--                 | SelectNetwork LoadedModel 
--                 | Details LoadedModel

-- type alias LoadedModel =
--     {
--          currentShows: List String
--         , walletAddress :  String
--         , amount : Maybe Int
--         , networks:  List (NetworkInfo)
--         , selectedNetwork:  Maybe NetworkInfo
       
--     }



-- -- Message
-- type Msg =  GotUserInfoResponse (RemoteData (Graphql.Http.Error (Maybe UserInfo)) (Maybe UserInfo))
--             | NetworkChange String
--             | OnSelectNetwork
--             | NavigateShows 
--             | ChangeNetwork
           

-- -- Update
-- update : Msg -> Model -> ( Model, Cmd Msg )
-- update msg model =
--     case (msg, model) of
--         (ChangeNetwork, Details loadModel) ->
--              (SelectNetwork loadModel , Cmd.none)
--         (NavigateShows, _) ->
--             (model , Nav.load  Routes.showsPath)
--         (OnSelectNetwork, _) ->
--             (model, Cmd.none)
--         (NetworkChange newMet, SelectNetwork loadModel) ->
--             let
--                 netWork = List.filter (\x -> x.name == newMet) loadModel.networks |> List.head
--             in
--                 (SelectNetwork {loadModel | selectedNetwork = netWork  }, Cmd.none)

--         (GotUserInfoResponse response, _) ->
--             case response of
--                 RemoteData.Loading ->
--                     (Loading "loading..." , Cmd.none)
--                 RemoteData.Success maybeData ->
--                     case maybeData of
--                         Just data ->
--                             -- TODOE: get networks
--                             (
--                                 SelectNetwork {
--                                      walletAddress = data.walletAddress
--                                     , amount = data.amount
--                                     , networks = List.filterMap (\a -> a) data.networks
--                                     , selectedNetwork = Nothing
--                                     , currentShows = [] 
    
--                                 }
--                             , Cmd.none)                            
--                         Nothing ->
--                             (LoadingProblem  "Can not get data", Cmd.none)
--                 RemoteData.Failure err ->
--                     (LoadingProblem  "err", Cmd.none)
--                 RemoteData.NotAsked ->
--                     (LoadingProblem  "Not Asked", Cmd.none)
--         (_, _) ->
--             (model, Cmd.none)    
-- -- View
-- view : Model -> Html Msg
-- view model =
--     case model of
--         Loading lmessage ->
--             loadingView lmessage
--         LoadingProblem errMessage ->
--             errorView errMessage
--         SelectNetwork loadedModel ->
--             chooseNetworkView loadedModel
--         Details loadedModel ->
--             playGameView loadedModel
    
-- loadingView : String -> Html Msg
-- loadingView  message =
--     div[][text message]

-- errorView : String -> Html Msg
-- errorView  errMessage =
--     div[][text errMessage]


-- chooseNetworkView : LoadedModel -> Html Msg
-- chooseNetworkView  model =
--          div[][
--          Form.form []
--         [   
--              Form.group []
--              [ Form.label [ for "mynetworks" ] [ text "Avaliable Networks" ]
--              , Select.select [ Select.id "mynetworks", Select.onChange NetworkChange  ]
--                  (List.map (\x ->  Select.item [] [ text x.name ]) model.networks) 
                           
--              ]
--          ]
--          ,    
--          Button.button [ Button.primary,  Button.onClick OnSelectNetwork ] [ text "Select" ]
--          , Button.button [ Button.secondary,  Button.onClick NavigateShows ] [ text "Add Network" ]
--          , Button.button [ Button.secondary ] [ text "Cancel" ]
--      ]



-- playGameView : LoadedModel -> Html Msg
-- playGameView model = 
--     div [] [
--         ListGroup.ul
--             (List.map (\x ->  ListGroup.li [] [ text x ]) model.currentShows)
--         , Button.button [ Button.primary,  Button.onClick NavigateShows ] [ text "Choose Available Shows" ]
--         , Button.button [Button.secondary, Button.onClick ChangeNetwork][ text "Change Network"]
--     ]

-- -- Subcriptions
-- subscriptions : Model -> Sub Msg
-- subscriptions model =
--     Sub.none


-- -- Helpers
-- makeUserInfoRequest : String -> Cmd Msg
-- makeUserInfoRequest username =
--     queryUserInfo username
--         |> Graphql.Http.queryRequest "https://graphql.fauna.com/graphql"
--         |> Graphql.Http.withHeader "Authorization" ("Bearer fnADbMd3RLACEpjT90hoJSn6SXhN281PIgIZg375" )
--         |> Graphql.Http.send (RemoteData.fromResult >> GotUserInfoResponse)

-- init : String  -> ( Model, Cmd Msg )
-- init username = 
--     (Loading username, makeUserInfoRequest username )
